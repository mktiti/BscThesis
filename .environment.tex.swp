\documentclass[11pt,a4paper,oneside]{report}

\usepackage[dvipsnames]{xcolor}
\usepackage{listings}

\lstdefinelanguage{Kotlin}{
  comment=[l]{//},
  commentstyle={\color{gray}\ttfamily},
  emph={delegate, filter, first, firstOrNull, forEach, lazy, map, mapNotNull, println, return@},
  emphstyle={\color{OrangeRed}},
  identifierstyle=\color{black},
  keywords={abstract, actual, as, as?, break, by, class, companion, continue, data, do, dynamic, else, enum, expect, false, final, for, fun, get, if, import, in, interface, internal, is, null, object, override, package, private, public, return, set, super, suspend, this, throw, true, try, typealias, val, var, vararg, when, where, while},
  keywordstyle={\color{NavyBlue}\bfseries},
  morecomment=[s]{/*}{*/},
  morestring=[b]",
  morestring=[s]{"""*}{*"""},
  ndkeywords={@Deprecated, @JvmField, @JvmName, @JvmOverloads, @JvmStatic, @JvmSynthetic, Array, Byte, Double, Float, Int, Integer, Iterable, Long, Runnable, Short, String},
  ndkeywordstyle={\color{BurntOrange}\bfseries},
  sensitive=true,
  stringstyle={\color{ForestGreen}\ttfamily},
}

\lstset{basicstyle=\footnotesize\ttfamily,breaklines=true}
\lstset{framextopmargin=5pt, framexleftmargin=5pt, framexrightmargin=5pt, framexbottommargin=5pt, frame=bottomline}
\lstset{language=Kotlin, frame=single, gobble=4, tabsize=4, showstringspaces=false}


\begin{document}

%----------------------------------------------------------------------------
\chapter{Environment}\label{sect:Environment}
%----------------------------------------------------------------------------

The backend system is written completely in the kotlin programming language with the exception of the game- and engine runtime APIs, which are written in java to allow game and bot development to happen in java without extra dependencies.

The system targets the Java Virtual Machine and is therefore reliant on its features such as OS independence and security. Despite being a primarily server side application, the system is not powered by Java Enterprise Edition but the more accessible Java Standard Edition (version 8).

	\section{Database}
 
 	The application can be configured to use any JDBC capable datasource, as a default implementation an in-process HSQLDB running in file mode is used as the database. For querying, standard SQL syntax is used, for the initialisation of the database custom create scripts may be necessary to be implemented if the selected database does not support the same types and options as HSQLDB.

	\section{Web backend}
	
	

	\section{Java Security Architecture}
	
	Since its early versions, the java platform has had built-in security measures to protect valuable resources while also providing the ability to execute untrusted code. The original purpose of this was to allow safe usage of unsafe web applets, which have since largely disappeared due to technological changes. However the java security model has remained in the language specification nonetheless, and through two main iterations have reached its current form in java 2 (formerly known as java 1.2).
	
	The current model allows the jvm to separately manage different code bases, all with their own unique set of permissions. These code units are loaded by one of possibly multiple classloaders either from a local source, from a remote path or whatever custom logic the specific classloader supports. It is also this classloader which assigns an appropriate identifier to these code collectives, based on which permissions can be granted.
	
	\subsection{Access control}
	
	Access control is done by a security manager which can be installed either programmatically or via a jvm argument. It is the job of this security manager instance then to check weather an action shall be allowed to happen in a given execution context. These permission checks are initiated by low level java APIs, such as I/O access methods or threading primitives and include a vast number of different actions such as specific file operations, configuration access, networking procedures or replacing the active security settings (including the security manager itself). While the security manager can be customised to deal with these requests in an arbitrary way programmatically, it is usually easier to configure separate policy settings to the different code sources and allow the default security manager to use these settings for access checking.
	
	The standard way of permission control is based on code sources and their respective set of permissions. At the points of an access check (e.g. reading from a file or creating a network socket) the default security manager delegates the request to the built-in AccessController. That in turn first creates a view of the current security context represented by a call stack, where each frame is assigned the set of permissions of its code (based on the code source the called method is located in). Then the controller iterates through the stack and only allows the request to go through if all frames would allow the request in isolation.
	
	This behaviour can be modified using the controller's set of doPrivileged methods that allows code to be executed if it would be allowed to run on its on right, effectively cutting the stack off under the specific method. This allows trusted code to provide operations on guarded resources to their untrusted counterparts. An example this might be useful for is when a file should be kept secret from an untrusted method, however some properties (e.g. number of lines) of that same file should be allowed to be accessed. In this example a trusted method could be written which reads the file and only returns the required property (line count). If this line counter method uses the access controller's privileged execution, then it would be allowed to be used from the original, untrusted code block without security exceptions being thrown and the file to become accessible from there.

	\begin{center}
		\begin{minipage}{11cm}
		\begin{lstlisting}[caption={Trusted.kt}]
	object Trusted {
		fun guardedLineCount(): Int {
			return AccessController.doPrivileged {
				File("guarded.txt").lines().count()
			}
		}
	}
		\end{lstlisting}
	
		\begin{lstlisting}[caption={Untrusted.kt}]
	object Untrusted {
		fun processCount() {
			val lineCount = Trusted.guardedLineCount()
			println("Guarded file has $lineCount lines!")
		}
	}
		\end{lstlisting}
		\end{minipage}
	\end{center}

	\subsection{Security policy}
	
	Assigning permissions to the different code sources can be done programmatically at load time using the classloader or in a declarative way via a policy file. A policy file contains a set of rules that grants define a list of permissions to be granted to code sources satisfying a set of selectors. These selectors can filter based on the identifier of the code source; whether it was cryptographically signed by someone, and if it was by whom it was signed by; or what organisation (Principal) does it belong to.
	
	The policy file to use can be set much like the security manager, either programmatically or through a jvm argument. 

	\subsection{Limitations}
	
	While the jvm has good facilities to protect resources and guard certain operation, it is not equipped to resolve all possible exploits which may be caused by untrusted code. Due to java's shared heap based memory model, the jvm is inherently incapable of providing thread-based protection against deliberate or accidental causes of out of memory errors.
	
	Furthermore, since errors - as opposed to exceptions - are not necessarily catchable (as they usually signal unrecoverable mishaps), it would not be possible to reliably log which actor caused a crash. That would be particularly unfortunate in the case of matches where one bot could cause any game to result in an error and the sinner could be undetectable.  

\end{document}








